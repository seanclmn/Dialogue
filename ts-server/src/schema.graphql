# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptFriendRequestInput {
  friendRequestId: String!
}

type Chat implements Node {
  createdAt: DateTime!
  id: ID!
  lastMessage: Message
  messages(after: String, first: Int): MessageConnection!
  name: String!
  participants: [User!]
}

type ChatConnection {
  edges: [ChatEdge!]!
  pageInfo: PageInfo!
}

type ChatEdge {
  cursor: String!
  node: Chat!
}

input ChatInput {
  id: ID!
  name: String!
  participants: [UpdateUserInput!]!
}

type ChatUpdate {
  chatId: String!
  newMessage: Message!
}

input CreateChatInput {
  name: String!
  participants: [String!]!
}

input CreateMessageInput {
  chatId: String!
  text: String!
  userId: String!
}

input CreateUserInput {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeclineFriendRequestInput {
  friendRequestId: String!
}

type FriendRequest {
  accepted: Boolean!
  declined: Boolean!
  id: String!
  receiver: User!
  sender: User!
}

type LoginResponse {
  accessToken: String!
  user: User!
}

input LoginUserInput {
  password: String!
  username: String!
}

type Message implements Node {
  chat: Chat!
  createdAt: DateTime!
  id: ID!
  text: String!
  userId: String!
}

type MessageConnection {
  edges: [MessageEdge!]!
  pageInfo: PageInfo!
}

type MessageEdge {
  cursor: String!
  node: Message!
}

type Mutation {
  acceptFriendRequest(acceptFriendRequestInput: AcceptFriendRequestInput!): User!
  createChat(createChatInput: CreateChatInput!): Chat!
  createMessage(createMessageInput: CreateMessageInput!): Message!
  createUser(createUserInput: CreateUserInput!): User!
  declineFriendRequest(declineFriendRequestInput: DeclineFriendRequestInput!): User!
  login(loginUserInput: LoginUserInput!): LoginResponse!
  removeChat(id: Int!): Chat!
  sendFriendRequest(sendFriendRequestInput: SendFriendRequestInput!): User!
  signup(createUserInput: CreateUserInput!): LoginResponse!
  updateChat(updateChatInput: UpdateChatInput!): Chat!
  updateMessage(updateMessageInput: UpdateMessageInput!): Message!
  updateTyping(chatId: String!, isTyping: Boolean!, userId: String!): TypingEventOutput!
  updateUser(updateUserInput: UpdateUserInput!): User!
}

interface Node {
  id: ID!
}

type Notification {
  id: String!
  receiver: User!
  receiverId: ID!
  sender: User!
}

type PageInfo {
  endCursor: String!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String!
}

type Query {
  chat(id: ID!): Chat!
  chats: [Chat!]!
  currentUser: User!
  message(id: Int!): Message!
  node(id: ID!): Node
  notifications(id: ID!): [Notification!]!
  user(username: String!): User!
  users(username: String!): [User!]!
}

input SendFriendRequestInput {
  receiverId: String!
  senderId: String!
}

type Subscription {
  newMessage(chatIds: [ID!]!): ChatUpdate!
  userTyping(chatId: ID!): TypingEventOutput!
}

type TypingEventOutput {
  chatId: ID!
  isTyping: Boolean!
  userId: String!
}

input UpdateChatInput {
  id: ID!
  name: String!
  participants: [UpdateUserInput!]!
}

input UpdateMessageInput {
  chatId: String
  id: String!
  text: String!
  userId: String!
}

input UpdateUserInput {
  bio: String
  chats: [ChatInput!]
  id: ID!
  username: String!
}

type User implements Node {
  bio: String
  chats(after: String, first: Int): ChatConnection!
  friendRequests(receiverId: String): [FriendRequest!]!
  friends(after: String, first: Int): UserConnection!
  id: ID!
  password: String!
  username: String!
}

type UserConnection {
  edges: [UserEdge!]!
  pageInfo: PageInfo!
}

type UserEdge {
  cursor: String!
  node: User!
}